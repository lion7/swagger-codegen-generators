package {{invokerPackage}};

import com.fasterxml.jackson.core.type.TypeReference;

import java.io.*;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.*;
import java.util.Map.Entry;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import {{invokerPackage}}.auth.Authentication;
import {{invokerPackage}}.auth.HttpBasicAuth;
import {{invokerPackage}}.auth.ApiKeyAuth;
import {{invokerPackage}}.auth.OAuth;

{{>generatedAnnotation}}
public class ApiClient {
  protected Map<String, String> defaultHeaderMap = new HashMap<String, String>();
  protected String basePath = "{{{basePath}}}";

  protected HttpClient httpClient;
  protected JSON json;
  protected String tempFolderPath = null;

  protected Map<String, Authentication> authentications;

  public ApiClient() {
    json = new JSON();
    httpClient = HttpClient.newHttpClient();

    // Set default User-Agent.
    setUserAgent("{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}Swagger-Codegen/{{{artifactVersion}}}/java{{/httpUserAgent}}");

    // Setup authentications (key: authentication name, value: authentication).
    authentications = new HashMap<String, Authentication>();{{#authMethods}}{{#is this 'basic'}}
    authentications.put("{{name}}", new HttpBasicAuth());{{/is}}{{#is this 'api-key'}}
    authentications.put("{{name}}", new ApiKeyAuth({{#is this 'key-in-header'}}"header"{{/is}}{{#isNot this 'key-in-header'}}"query"{{/isNot}}, "{{keyParamName}}"));{{/is}}{{#is this 'oauth'}}
    authentications.put("{{name}}", new OAuth());{{/is}}{{#is this 'bearer'}}
    authentications.put("{{name}}", new OAuth());{{/is}}{{/authMethods}}
    // Prevent the authentications from being modified.
    authentications = Collections.unmodifiableMap(authentications);
  }

  /**
   * Gets the JSON instance to do JSON serialization and deserialization.
   * @return JSON
   */
  public JSON getJSON() {
    return json;
  }

  public ApiClient setJSON(JSON json) {
    this.json = json;
    return this;
  }

  public HttpClient getHttpClient() {
    return httpClient;
  }

  public ApiClient setHttpClient(HttpClient httpClient) {
    this.httpClient = httpClient;
    return this;
  }

  public String getBasePath() {
    return basePath;
  }

  public ApiClient setBasePath(String basePath) {
    this.basePath = basePath;
    return this;
  }

  /**
   * Get authentications (key: authentication name, value: authentication).
   * @return Map of authentication object
   */
  public Map<String, Authentication> getAuthentications() {
    return authentications;
  }

  /**
   * Get authentication for the given name.
   *
   * @param authName The authentication name
   * @return The authentication, null if not found
   */
  public Authentication getAuthentication(String authName) {
    return authentications.get(authName);
  }

  /**
   * Helper method to set username for the first HTTP basic authentication.
   * @param username Username
   */
  public void setUsername(String username) {
    for (Authentication auth : authentications.values()) {
      if (auth instanceof HttpBasicAuth) {
        ((HttpBasicAuth) auth).setUsername(username);
        return;
      }
    }
    throw new RuntimeException("No HTTP basic authentication configured!");
  }

  /**
   * Helper method to set password for the first HTTP basic authentication.
   * @param password Password
   */
  public void setPassword(String password) {
    for (Authentication auth : authentications.values()) {
      if (auth instanceof HttpBasicAuth) {
        ((HttpBasicAuth) auth).setPassword(password);
        return;
      }
    }
    throw new RuntimeException("No HTTP basic authentication configured!");
  }

  /**
   * Helper method to set API key value for the first API key authentication.
   * @param apiKey API key
   */
  public void setApiKey(String apiKey) {
    for (Authentication auth : authentications.values()) {
      if (auth instanceof ApiKeyAuth) {
        ((ApiKeyAuth) auth).setApiKey(apiKey);
        return;
      }
    }
    throw new RuntimeException("No API key authentication configured!");
  }

  /**
   * Helper method to set API key prefix for the first API key authentication.
   * @param apiKeyPrefix API key prefix
   */
  public void setApiKeyPrefix(String apiKeyPrefix) {
    for (Authentication auth : authentications.values()) {
      if (auth instanceof ApiKeyAuth) {
        ((ApiKeyAuth) auth).setApiKeyPrefix(apiKeyPrefix);
        return;
      }
    }
    throw new RuntimeException("No API key authentication configured!");
  }

  /**
   * Helper method to set access token for the first OAuth2 authentication.
   * @param accessToken Access token
   */
  public void setAccessToken(String accessToken) {
    for (Authentication auth : authentications.values()) {
      if (auth instanceof OAuth) {
        ((OAuth) auth).setAccessToken(accessToken);
        return;
      }
    }
    throw new RuntimeException("No OAuth2 authentication configured!");
  }

  /**
   * Set the User-Agent header's value (by adding to the default header map).
   * @param userAgent Http user agent
   * @return API client
   */
  public ApiClient setUserAgent(String userAgent) {
    addDefaultHeader("User-Agent", userAgent);
    return this;
  }

  /**
   * Add a default header.
   *
   * @param key The header's key
   * @param value The header's value
   * @return API client
   */
  public ApiClient addDefaultHeader(String key, String value) {
    defaultHeaderMap.put(key, value);
    return this;
  }

  /**
   * The path of temporary folder used to store downloaded files from endpoints
   * with file response. The default value is <code>null</code>, i.e. using
   * the system's default tempopary folder.
   *
   * @return Temp folder path
   */
  public String getTempFolderPath() {
    return tempFolderPath;
  }

  /**
   * Set temp folder path
   * @param tempFolderPath Temp folder path
   * @return API client
   */
  public ApiClient setTempFolderPath(String tempFolderPath) {
    this.tempFolderPath = tempFolderPath;
    return this;
  }

  /**
   * Format the given parameter object into string.
   * @param param Object
   * @return Object in string format
   */
  public String parameterToString(Object param) {
    if (param == null) {
      return "";
    } else if (param instanceof Date || param instanceof OffsetDateTime || param instanceof LocalDate) {
      //Serialize to json string and remove the " enclosing characters
      String jsonStr = json.serialize(param);
      return jsonStr.substring(1, jsonStr.length() - 1);
    } else if (param instanceof Collection) {
      return ((Collection<?>) param).stream().map(String::valueOf).collect(Collectors.joining(","));
    } else {
      return String.valueOf(param);
    }
  }

  /*
   * Format to {@code Pair} objects.
   * @param collectionFormat Collection format
   * @param name Name
   * @param value Value
   * @return List of pairs
   */
  public List<Pair> parameterToPairs(String collectionFormat, String name, Object value){
    List<Pair> params = new ArrayList<Pair>();

    // preconditions
    if (name == null || name.isEmpty() || value == null) return params;

    Collection valueCollection;
    if (value instanceof Collection) {
      valueCollection = (Collection) value;
    } else {
      params.add(new Pair(name, parameterToString(value)));
      return params;
    }

    if (valueCollection.isEmpty()){
      return params;
    }

    // get the collection format (default: csv)
    String format = (collectionFormat == null || collectionFormat.isEmpty() ? "csv" : collectionFormat);

    // create the params based on the collection format
    if ("multi".equals(format)) {
      for (Object item : valueCollection) {
        params.add(new Pair(name, parameterToString(item)));
      }

      return params;
    }

    String delimiter = ",";

    if ("csv".equals(format)) {
      delimiter = ",";
    } else if ("ssv".equals(format)) {
      delimiter = " ";
    } else if ("tsv".equals(format)) {
      delimiter = "\t";
    } else if ("pipes".equals(format)) {
      delimiter = "|";
    }

    StringBuilder sb = new StringBuilder() ;
    for (Object item : valueCollection) {
      sb.append(delimiter);
      sb.append(parameterToString(item));
    }

    params.add(new Pair(name, sb.substring(1)));

    return params;
  }

  /**
   * Check if the given MIME is a JSON MIME.
   * JSON MIME examples:
   *   application/json
   *   application/json; charset=UTF8
   *   APPLICATION/JSON
   *   application/vnd.company+json
   * "* / *" is also default to JSON
   * @param mime MIME
   * @return True if the MIME type is JSON
   */
  public boolean isJsonMime(String mime) {
    String jsonMime = "(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$";
    return mime != null && (mime.matches(jsonMime) || mime.equals("*/*"));
  }

  /**
   * Select the Accept header's value from the given accepts array:
   *   if JSON exists in the given array, use it;
   *   otherwise use all of them (joining into a string)
   *
   * @param accepts The accepts array to select from
   * @return The Accept header to use. If the given array is empty,
   *   null will be returned (not to set the Accept header explicitly).
   */
  public String selectHeaderAccept(String[] accepts) {
    if (accepts.length == 0) {
      return null;
    }
    for (String accept : accepts) {
      if (isJsonMime(accept)) {
        return accept;
      }
    }
    return String.join(",", accepts);
  }

  /**
   * Select the Content-Type header's value from the given array:
   *   if JSON exists in the given array, use it;
   *   otherwise use the first one of the array.
   *
   * @param contentTypes The Content-Type array to select from
   * @return The Content-Type header to use. If the given array is empty,
   *   JSON will be used.
   */
  public String selectHeaderContentType(String[] contentTypes) {
    if (contentTypes.length == 0) {
      return "application/json";
    }
    for (String contentType : contentTypes) {
      if (isJsonMime(contentType)) {
        return contentType;
      }
    }
    return contentTypes[0];
  }

  /**
   * Escape the given string to be used as URL query value.
   * @param str String
   * @return Escaped string
   */
  public String escapeString(String str) {
    try {
      return URLEncoder.encode(str, "utf8").replaceAll("\\+", "%20");
    } catch (UnsupportedEncodingException e) {
      return str;
    }
  }

  /**
   * Invoke API by sending HTTP request with the given options.
   *
   * @param <T> Type
   * @param path The sub-path of the HTTP URL
   * @param method The request method, one of "GET", "POST", "PUT", "HEAD" and "DELETE"
   * @param queryParams The query parameters
   * @param body The request body object
   * @param headerParams The header parameters
   * @param formParams The form parameters
   * @param accept The request's Accept header
   * @param contentType The request's Content-Type header
   * @param authNames The authentications to apply
   * @param returnType The return type into which to deserialize the response
   * @return The response body in type of string
   * @throws ApiException API exception
   */
  public <T> T invokeAPI(String path, String method, List<Pair> queryParams, Object body, Map<String, String> headerParams, Map<String, Object> formParams, String accept, String contentType, String[] authNames, TypeReference<T> returnType) throws ApiException {
    updateParamsForAuth(authNames, queryParams, headerParams);

    final String queryString;
    if(queryParams != null && !queryParams.isEmpty()) {
        queryString = queryParams.stream()
            .filter(e -> e.getValue() != null)
            .map(e -> e.getName() + "=" + e.getValue())
            .collect(Collectors.joining("&", "?", ""));
    } else {
        queryString = "";
    }

    URI uri = URI.create(this.basePath + path + queryString);
    HttpRequest.Builder requestBuilder = HttpRequest.newBuilder(uri);

    for (Entry<String, String> entry : headerParams.entrySet()) {
      String value = entry.getValue();
      if (value != null) {
        requestBuilder = requestBuilder.header(entry.getKey(), value);
      }
    }

    for (Entry<String, String> entry : defaultHeaderMap.entrySet()) {
      String key = entry.getKey();
      if (!headerParams.containsKey(key)) {
        String value = entry.getValue();
        if (value != null) {
          requestBuilder = requestBuilder.header(key, value);
        }
      }
    }

    HttpRequest.BodyPublisher bodyPublisher = HttpRequest.BodyPublishers.ofInputStream(() -> {
      if (contentType.startsWith("multipart/form-data")) {
        String boundary = UUID.randomUUID().toString();
        return buildMultipart(boundary, formParams);
      } else if (contentType.startsWith("application/x-www-form-urlencoded")) {
        return buildFormUrlEncoded(formParams);
      } else {
        return new ByteArrayInputStream(json.serialize(body).getBytes());
      }
    });

    if ("GET".equals(method)) {
      requestBuilder = requestBuilder.GET();
    } else if ("POST".equals(method)) {
      requestBuilder = requestBuilder.POST(bodyPublisher);
    } else if ("PUT".equals(method)) {
      requestBuilder = requestBuilder.PUT(bodyPublisher);
    } else if ("DELETE".equals(method)) {
      requestBuilder = requestBuilder.DELETE();
    } else if ("PATCH".equals(method)) {
      requestBuilder = requestBuilder.method("PATCH", bodyPublisher);
    } else if ("HEAD".equals(method)) {
      requestBuilder = requestBuilder.method("HEAD", bodyPublisher);
    } else {
      throw new ApiException(500, "unknown method type " + method);
    }

    HttpRequest request = requestBuilder.build();

    try {
      HttpResponse<InputStream> response = httpClient.send(request, HttpResponse.BodyHandlers.ofInputStream());
      if (response.statusCode() == 204) { // 204 No Content
        return null;
      } else if (response.statusCode() >= 200 && response.statusCode() < 300) { // 2xx successful
        if (returnType == null) {
          return null;
        } else if (returnType.getType() == byte[].class) {
          // Handle binary response (byte array).
          try (InputStream responseBody = response.body()) {
            return (T) responseBody.readAllBytes();
          } catch (IOException e) {
            throw new ApiException(e);
          }
        } else if (returnType.getType() == File.class) {
          // Handle file downloading.
          return (T) downloadFileFromResponse(response);
        } else {
          Optional<String> responseContentType = response.headers().firstValue("Content-Type");
          if (responseContentType.isEmpty()) {
            throw new ApiException(500, "missing Content-Type in response");
          }

          try (InputStream responseStream = response.body()) {
            String content = new String(responseStream.readAllBytes());
            return json.deserialize(content, returnType);
          } catch (IOException e) {
            throw new ApiException(e);
          }
        }
      } else {
        String message = "error";
        String respBody = null;
        try (InputStream responseStream = response.body()) {
          if (responseStream != null) {
            respBody = message = new String(responseStream.readAllBytes());
          }
        }
        throw new ApiException(
              response.statusCode(),
              message,
              response.headers().map(),
              respBody);
      }
    } catch (InterruptedException | IOException e) {
      throw new ApiException(e);
    }
  }

  /**
   * Update query and header parameters based on authentication settings.
   *
   * @param authNames The authentications to apply
   */
  protected void updateParamsForAuth(String[] authNames, List<Pair> queryParams, Map<String, String> headerParams) {
    for (String authName : authNames) {
      Authentication auth = authentications.get(authName);
      if (auth == null) throw new RuntimeException("Authentication undefined: " + authName);
      auth.applyToParams(queryParams, headerParams);
    }
  }

  private InputStream buildFormUrlEncoded(Map<String, Object> formParams) {
    String queryString = formParams.entrySet().stream()
            .filter(e -> e.getValue() != null)
            .map(e -> URLEncoder.encode(e.getKey(), StandardCharsets.UTF_8) + "="
                    + URLEncoder.encode(parameterToString(e.getValue()), StandardCharsets.UTF_8))
            .collect(Collectors.joining("&"));
    return new ByteArrayInputStream(queryString.getBytes());
  }

  private InputStream buildMultipart(String boundary, Map<String, Object> formParams) {
      List<InputStream> multipartStreams = new ArrayList<>(2 + formParams.size() * 2);
      multipartStreams.add(new ByteArrayInputStream("\r\n".getBytes()));
      for (Entry<String, Object> param : formParams.entrySet()) {
          if (param.getValue() instanceof File) {
              String name = param.getKey();
              File file = (File) param.getValue();
              String fileName = file.getName();
              String contentType = guessContentTypeFromFile(file);
              String partHeader = "\r\n--" + boundary + "\r\n" +
                      "Content-Disposition: form-data; name=\"" + name + "\"; filename=\"" + fileName + "\"\r\n" +
                      "Content-Type: " + contentType + "\r\n\r\n";
              multipartStreams.add(new ByteArrayInputStream(partHeader.getBytes()));
              try {
                multipartStreams.add(new FileInputStream(file));
              } catch (FileNotFoundException e) {
                throw new RuntimeException(e);
              }
          } else {
              String name = param.getKey();
              String partHeader = "\r\n--" + boundary + "\r\n" +
                      "Content-Disposition: form-data; name=\"" + name + "\"\r\n\r\n";
              multipartStreams.add(new ByteArrayInputStream(partHeader.getBytes()));
              multipartStreams.add(new ByteArrayInputStream(parameterToString(param.getValue()).getBytes()));
          }
      }
      multipartStreams.add(new ByteArrayInputStream(("\r\n--" + boundary + "--\r\n\r\n").getBytes()));
      return new SequenceInputStream(Collections.enumeration(multipartStreams));
  }

  /**
   * Guess Content-Type header from the given file (defaults to "application/octet-stream").
   *
   * @param file The given file
   * @return The guessed Content-Type
   */
  private String guessContentTypeFromFile(File file) {
    String contentType = URLConnection.guessContentTypeFromName(file.getName());
    return Objects.requireNonNullElse(contentType, "application/octet-stream");
  }

  /**
   * Download file from the given response.
   * @param response Response
   * @return File
   * @throws ApiException If fail to read file content from response and write to disk
   */
  private File downloadFileFromResponse(HttpResponse<InputStream> response) throws ApiException {
    try {
      File file = prepareDownloadFile(response);
      try (InputStream body = response.body()) {
        Files.copy(body, file.toPath(), StandardCopyOption.REPLACE_EXISTING);
      }
      return file;
    } catch (IOException e) {
      throw new ApiException(e);
    }
  }

  private File prepareDownloadFile(HttpResponse<InputStream> response) throws IOException {
    String filename = null;
    Optional<String> contentDisposition = response.headers().firstValue("Content-Disposition");
    if (contentDisposition.isPresent()) {
      // Get filename from the Content-Disposition header.
      Pattern pattern = Pattern.compile("filename=['\"]?([^'\"\\s]+)['\"]?");
      Matcher matcher = pattern.matcher(contentDisposition.get());
      if (matcher.find())
        filename = matcher.group(1);
    }

    String prefix;
    String suffix = null;
    if (filename == null) {
      prefix = "download-";
      suffix = "";
    } else {
      int pos = filename.lastIndexOf('.');
      if (pos == -1) {
        prefix = filename + "-";
      } else {
        prefix = filename.substring(0, pos) + "-";
        suffix = filename.substring(pos);
      }
      // File.createTempFile requires the prefix to be at least three characters long
      if (prefix.length() < 3)
        prefix = "download-";
    }

    if (tempFolderPath == null)
      return File.createTempFile(prefix, suffix);
    else
      return File.createTempFile(prefix, suffix, new File(tempFolderPath));
  }
}
